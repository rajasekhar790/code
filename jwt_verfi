from flask import Flask, request, jsonify
from okta_jwt_verifier import JWTVerifier
from okta_jwt_verifier.exceptions import TokenExpiredError

app = Flask(__name__)

# Okta configuration
ISSUER = 'https://{yourOktaDomain}/oauth2/default'  # Replace with your Okta domain
CLIENT_ID = '{yourClientId}'  # Replace with your Okta client ID

jwt_verifier = JWTVerifier(ISSUER, CLIENT_ID)

# Middleware to authenticate the token
def authenticate_token(f):
    def wrapper(*args, **kwargs):
        auth_header = request.headers.get('Authorization', None)
        if auth_header is None or not auth_header.startswith("Bearer "):
            return jsonify({"error": "Unauthorized", "message": "Token expired"}), 401
        
        token = auth_header.split(" ")[1]
        
        try:
            # Validate the token with Okta JWT Verifier
            jwt_verifier.verify_access_token(token)
        except TokenExpiredError:
            return jsonify({"error": "Unauthorized", "message": "Token expired"}), 401
        except Exception as e:
            return jsonify({"error": "Unauthorized", "message": str(e)}), 401
        
        # Token is valid, continue with request
        return f(*args, **kwargs)

    wrapper.__name__ = f.__name__
    return wrapper

# Example protected route
@app.route('/protected')
@authenticate_token
def protected():
    return jsonify({"message": "Protected content"})

if __name__ == '__main__':
    app.run(debug=True)
